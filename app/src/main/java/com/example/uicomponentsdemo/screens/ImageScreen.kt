package com.example.uicomponentsdemo.screens

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import com.example.uicomponentsdemo.R

@OptIn(androidx.compose.material3.ExperimentalMaterial3Api::class)
@Composable
fun ImageScreen() {
    Scaffold(
        topBar = {
            TopAppBar(title = { Text("Images Demo") })
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .padding(padding)
                .padding(16.dp)
        ) {
            // ·∫¢nh t·ª´ resources (drawable)
            Text("üì∑ ·∫¢nh t·ª´ t√†i nguy√™n n·ªôi b·ªô (res/drawable):")
            Image(
                painter = painterResource(id = R.drawable.uth),
                contentDescription = "Local image",
                modifier = Modifier
                    .fillMaxWidth()
                    .height(200.dp)
                    .padding(top = 8.dp),
                contentScale = ContentScale.Crop
            )

            Spacer(modifier = Modifier.height(24.dp))

            // ·∫¢nh t·ª´ URL (AsyncImage)
            Text("üåê ·∫¢nh t·∫£i t·ª´ Internet:")
            AsyncImage(
                model = "https://share.google/images/WxYwnWuTbjW2okwhx",
                contentDescription = "Network image",
                modifier = Modifier
                    .fillMaxWidth()
                    .height(200.dp)
                    .padding(top = 8.dp),
                contentScale = ContentScale.Crop
            )

            Spacer(modifier = Modifier.height(24.dp))

            // ·∫¢nh base64 minh h·ªça ng·∫Øn (ch·ªâ v√≠ d·ª•)
            Text("üß© ·∫¢nh t·ª´ chu·ªói Base64 (v√≠ d·ª• nh·ªè):")
            AsyncImage(
                model = "",
                contentDescription = "Base64 Image",
                modifier = Modifier
                    .fillMaxWidth()
                    .height(200.dp)
                    .padding(top = 8.dp),
                contentScale = ContentScale.Crop
            )
        }
    }
}
